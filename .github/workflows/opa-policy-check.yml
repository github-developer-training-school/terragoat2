name: 'OPA Policy Check'

on:
  workflow_dispatch:
    inputs:
      path:
        description: 'Path to Terraform directory to scan (relative)'
        required: false
        default: 'trivy-demo'

jobs:
  opa-check:
    runs-on: ubuntu-latest
    name: Run OPA
    env:
      AWS_EC2_METADATA_DISABLED: 'true'
      AWS_ACCESS_KEY_ID: 'DUMMY'
      AWS_SECRET_ACCESS_KEY: 'DUMMY'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: Terraform plan (non-interactive, fallback)
        working-directory: ${{ github.event.inputs.path }}
        run: |
          terraform init -backend=false -input=false || true
          terraform plan -out=tfplan.binary -refresh=false -input=false || true
          # Capture terraform show output into a temp file and validate it's JSON. If not, fall back to an empty JSON object.
          terraform show -json tfplan.binary > tfplan.tmp 2>&1 || true
          if jq -e . tfplan.tmp >/dev/null 2>&1; then
            mv tfplan.tmp tfplan.json
          else
            echo "Warning: terraform show did not produce valid JSON; saving raw output to tfplan.raw and using '{}' for tfplan.json" >&2
            mv tfplan.tmp tfplan.raw || true
            echo '{}' > tfplan.json
          fi

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: 'v0.45.0'

      - name: Run OPA (evaluate policy/ against plan)
        working-directory: ${{ github.event.inputs.path }}
        run: |
          set -euo pipefail
          if [ ! -f tfplan.json ]; then
            echo '{}' > tfplan.json
          fi
          echo "Running OPA eval against tfplan.json using policies in ../policy/"
          echo "--- debug: tfplan.json top-level keys ---"
          jq 'keys' tfplan.json || true
          echo "--- debug: resource_changes summary (address,type,actions,after.tags,after.tags_all) ---"
          jq -c '.resource_changes[]? | {address: .address, type: .type, actions: .change.actions, after_tags: .change.after.tags, after_tags_all: .change.after.tags_all}' tfplan.json || true
          echo "--- debug: planned_values.root_module.resources summary (address,type,values.tags,values.tags_all) ---"
          jq -c '.planned_values.root_module.resources[]? | {address: .address, type: .type, values_tags: .values.tags, values_tags_all: .values.tags_all}' tfplan.json || true
          echo "--- debug: policy files present in ../policy ---"
          ls -la ../policy || true
          echo "--- debug: head ../policy/tags.rego ---"
          head -n 200 ../policy/tags.rego || true
          echo "--- debug: head ../policy/demo_force_deny_universal.rego ---"
          head -n 200 ../policy/demo_force_deny_universal.rego || true
          # Output JSON for reliable parsing, and also save a pretty text copy
          opa eval --data ../policy/ --input tfplan.json 'data.terraform.deny' -f json > opa-results.json
          # Debug: produce an explanation trace to help see why rules didn't match
          opa eval --data ../policy/ --input tfplan.json 'data.terraform.deny' --explain full -f pretty > opa-explain.txt || true
          # Pretty-print for human logs
          jq '.' opa-results.json > opa-results.txt || cat opa-results.json > opa-results.txt
          echo "OPA JSON result saved to opa-results.json"
          # If denies exist, fail the step to make the CI actionable
          denys=$(jq '.[0].expressions[0].value | length' opa-results.json 2>/dev/null || echo 0)
          echo "denies_count=$denys"
          if [ "${denys}" != "0" ]; then
            echo "OPA found denies; see opa-results.txt"
            cat opa-results.txt
            exit 1
          else
            echo "No denies found by OPA"
            cat opa-results.txt
          fi

      - name: Upload OPA results
        uses: actions/upload-artifact@v4
        with:
          name: opa-results
          path: |
            ${{ github.event.inputs.path }}/tfplan.json
            ${{ github.event.inputs.path }}/opa-results.txt
          if-no-files-found: warn
