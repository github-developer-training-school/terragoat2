name: 'Terraform Compliance'

on:
  workflow_dispatch:
    inputs:
      path:
        description: 'Path to Terraform directory to scan (relative)'
        required: false
        default: 'trivy-demo'

jobs:
  compliance-check:
    name: 'Run terraform-compliance'
    runs-on: ubuntu-latest
    env:
      AWS_EC2_METADATA_DISABLED: 'true'
      AWS_ACCESS_KEY_ID: 'DUMMY'
      AWS_SECRET_ACCESS_KEY: 'DUMMY'

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: 'Terraform Init (no backend)'
        working-directory: ${{ github.event.inputs.path }}
        run: terraform init -backend=false -input=false

      - name: 'Terraform Plan and Show'
        working-directory: ${{ github.event.inputs.path }}
        id: plan
        run: |
          terraform plan -out=plan.out -refresh=false -input=false || true
          terraform show -json plan.out > plan.json || echo '{}' > plan.json

      - name: 'Run terraform-compliance (demo)'
        # run from repository root and use GITHUB_WORKSPACE to avoid missing-directory errors
        run: |
          ROOT="$GITHUB_WORKSPACE"
          TF_DIR="${ROOT}/${{ github.event.inputs.path }}"

          # Ensure the target terraform directory exists
          mkdir -p "$TF_DIR"

          if [ -f "$TF_DIR/plan.json" ]; then
            echo "Found plan.json; running terraform-compliance against features/ (demo)"
          else
            echo "No plan.json found; creating placeholder"
            echo '{}' > "$TF_DIR/plan.json"
          fi

          # Ensure features dir exists
          mkdir -p "$ROOT/features"

          # For a failing demo: copy plan.json and remove the Environment tag from aws_s3_bucket resources
          if [ -f "$TF_DIR/plan.json" ]; then
            jq '(.resource_changes[] | select(.type=="aws_s3_bucket") | .change.after.tags) |= (if . == null then {} else del(.Environment) end)' "$TF_DIR/plan.json" > "$ROOT/features/plan.json" || cp "$TF_DIR/plan.json" "$ROOT/features/plan.json"
            echo "Copied modified plan.json to features/ (Environment tag removed for demo failure)"
          else
            echo "No plan.json to modify; creating empty placeholder"
            echo '{}' > "$ROOT/features/plan.json"
          fi

      - name: Install terraform-compliance
        run: |
          python -m pip install --upgrade pip
          pip install terraform-compliance

      - name: Install custom step definitions into terraform-compliance site-packages
        run: |
          # Run helper script to install custom steps into site-packages
          python .github/scripts/install_custom_steps.py || true

      - name: Verify installed terraform-compliance steps
        run: |
          echo "Verifying terraform-compliance steps installation"
          python .github/scripts/verify_custom_steps.py || true

      - name: Run terraform-compliance against plan.json
        working-directory: ${{ github.event.inputs.path }}
        run: |
          # terraform-compliance expects a plan file and a features directory. For demo we run features/ from repo root.
          if [ ! -f plan.json ]; then
            echo '{}' > plan.json
          fi
          # Run terraform-compliance, save output to file and print to console; propagate exit code
          set -o pipefail
          # DEBUG: show environment and files to help diagnose no-output issues
          echo "--- debug: pwd ---"
          pwd
          echo "--- debug: ls -la (working dir) ---"
          ls -la
          echo "--- debug: ls -la ../features ---"
          ls -la ../features || true
          echo "--- debug: head plan.json ---"
          head -n 200 plan.json || true
          echo "--- debug: head ../features/s3_must_have_environment_tag.feature ---"
          head -n 200 ../features/s3_must_have_environment_tag.feature || true
          echo "--- debug: python and pip info ---"
          python -V || true
          pip show terraform-compliance || true

          echo "--- debug: verify installed custom steps BEFORE running terraform-compliance ---"
          python "$GITHUB_WORKSPACE/.github/scripts/verify_custom_steps.py" || true

          # Fail early if custom step isn't installed (helps surface missing-step problems)
          python - <<'PY'
import importlib, inspect, os, sys
try:
    mod = importlib.import_module('terraform_compliance')
    site_dir = os.path.dirname(inspect.getfile(mod))
    steps_dir = os.path.join(site_dir, 'steps')
    target = os.path.join(steps_dir, 'custom_steps.py')
    if not os.path.isfile(target):
        print('ERROR: custom_steps.py not found at', target)
        sys.exit(2)
    else:
        print('OK: custom_steps.py present at', target)
except Exception as e:
    print('ERROR: could not verify custom steps:', e)
    sys.exit(2)
PY
          terraform-compliance -p plan.json -f ../features/ 2>&1 | tee tf-compliance-output.txt
          rc=${PIPESTATUS[0]:-0}
          echo "terraform-compliance exit code: $rc"
          exit $rc

      - name: Upload terraform-compliance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-compliance-artifacts
          path: |
            ${{ github.event.inputs.path }}/plan.json
            ${{ github.event.inputs.path }}/tf-compliance-output.txt
          if-no-files-found: warn

