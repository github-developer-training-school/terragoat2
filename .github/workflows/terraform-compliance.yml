name: Terraform Compliance

on:
  workflow_dispatch:
    inputs:
      terraform_path:
        description: 'Path to scan (relative)'
        required: true
        default: 'terraform/aws'

jobs:
  test:
    name: Terraform Compliance Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        name: Checkout repository

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: ${{ github.event.inputs.terraform_path || 'terraform/aws' }}
        env:
          TF_IN_AUTOMATION: 1
        run: terraform init -backend=false -input=false

      - name: Terraform Validate
        working-directory: ${{ github.event.inputs.terraform_path || 'terraform/aws' }}
        run: terraform validate || true

      - name: Terraform Plan (generate JSON)
        working-directory: ${{ github.event.inputs.terraform_path || 'terraform/aws' }}
        env:
          TF_IN_AUTOMATION: 1
        run: |
          terraform plan -input=false -out=plan.out || true
          if [ -f plan.out ]; then
            terraform show -json plan.out > plan.out.json || echo '{}' > plan.out.json
          else
            echo '{}' > plan.out.json
          fi

      - name: Run terraform-compliance (Docker)
        run: |
          # Use the official docker image; mount repository path as /target
          # Use absolute path via github workspace to avoid invalid docker volume name
          TARGET_PATH="${{ github.workspace }}/${{ github.event.inputs.terraform_path || 'terraform/aws' }}"
          # Ensure the plan JSON exists and is readable by the container
          if [ ! -f "$TARGET_PATH/plan.out.json" ]; then
            echo '{}' > "$TARGET_PATH/plan.out.json"
          fi
          docker run --rm -v "$TARGET_PATH":/target -e TF_IN_AUTOMATION=1 eerkunt/terraform-compliance -f compliance -p /target/plan.out.json
